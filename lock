
#!/usr/bin/env bash

password="pass"     # password to open data.txt

title_screen="
================================================
||                                            ||
||                  WELCOME                   ||
||                     TO                     ||
||                                            ||
||                 .--------.                 ||
||                / .------. \                ||
||               / /        \ \               ||  
||               | |        | |               ||
||              _| |________| |_              ||
||            .' |_|        |_| '.            ||
||            '._____ ____ _____.'            ||
||            |     .'____'.     |            ||
||            '.__.'.'    '.'.__.'            ||
||            '.__  |      |  __.'            ||
||            |   '.'.____.'.'   |            ||
||            '.____'.____.'____.'            ||
||            '.________________.'            ||
||                                            ||
||                    LOCK                    ||
||                                            ||
================================================
      Conveniently and safely store links, 
         passwords, and sensitive data
             through user password
                 authentication
"

# start of title screen
clear
echo "$title_screen"
# end of title screen

# getting options from user
while getopts ":aevnhM" option; do
    case $option in
        a) # all
            all_flag=1
            ;;
        e) # emacs
            emacs_flag=1
            ;;
        v) # vim
            vim_flag=1
            ;;
        n) # nano
            nano_flag=1
            ;;
        h) # help flag
            help_flag=1
            ;;
        M) # master flag
            master_flag=1
            ;;
        *)  # default
            error_flag=1
            ;;
    esac
done

# error flag set
if [[ error_flag -eq 1 ]]; then
    echo -ne "\nError: invalid option, refer to help page using lock -h\n"
    exit 1  # exit error
fi

# help flag set
if [[ help_flag -eq 1 ]]; then
    echo -e "\t\nSyntax: lock [-evnh]"
    echo -e "\toptions:"
    echo -e "\ta            Print all sensitive data to console"
    echo -e "\te            Access sensitive data using Emacs"
    echo -e "\tv            Access sensitive data using Vim"
    echo -e "\tn            Access sensitive data using Nano"
    echo -e "\th            Show help page"
    exit 0  # exit success
fi

# emacs flag set
if [[ emacs_flag -eq 1 ]]; then
    echo -ne "Opening sensitive data using Emacs"
fi

# vim flag set
if [[ vim_flag -eq 1 ]]; then
    echo -ne "Opening sensitive data using Vim"
fi

# nano flag set
if [[ nano_flag -eq 1 ]]; then
    echo -ne "Opening sensitive data using Nano"
fi

# if all flag set
if [[ all_flag -eq 1 ]]; then
    echo -ne "Printing sensitive data to console"
fi

# if all flag set
if [[ master_flag -eq 1 ]]; then
    echo -ne "master"
fi

echo -ne "\nPassword: "
openssl enc -aes-256-cbc -d -in data.txt.enc -out data.txt -pass stdin

# opening with text editor of choice
echo -ne "\nSuccess. Now loading...\n"
echo -ne '[#########..................]   33%  \r'
sleep 1
echo -ne '[##################.........]   66%  \r'
sleep 1
echo -ne '[###########################]   100% \r'
sleep 1
echo -ne '\n'

# opening with text editor
if [[ emacs_flag -eq 1 ]]; then
    emacs data.txt
elif [[ vim_flag -eq 1 ]]; then
    vim data.txt
elif [[ nano_flag -eq 1 ]]; then
    nano data.txt
elif [[ all_flag -eq 1 ]]; then
    cat data.txt | less
fi

# deleting file named "data.txt~" (only occurs if text editor is Emacs)
if [[ -n $(find . -name "data.txt~") ]]; then
    rm data.txt~
fi

exit 0 # exit success