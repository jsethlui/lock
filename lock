#!/usr/bin/env bash

declare -r password="pass"

# start of title screen
clear
cat title_screen.txt
# end of title screen

while getopts ":evnh" option; do
    case $option in
        e) # emacs
            emacs_flag=1
            ;;
        v) # vim
            vim_flag=1
            ;;
        n) # nano
            nano_flag=1
            ;;
        h)
            help_flag=1
            ;;
        *)  # default
            error_flag=1
            ;;
    esac
done

# help flag
if [[ help_flag -eq 1 ]]; then
    echo -e "\t\nSyntax: lock [-evnh]"
    echo -e "\toptions:"
    echo -e "\te            Access sensitive data using Emacs"
    echo -e "\tv            Access sensitive data using Vim"
    echo -e "\tn            Access sensitive data using Nano"
    echo -e "\th            Show help page"
    continue=0  # assign variable, continue, to false
fi

while : ; do
    echo -en "\n\nPassword: "
    read -s user_password
    [[ $user_password == $password ]] || echo -en "\n   Error: incorrect password"  
    [[ $user_password != $password ]] || break  # terminating condition
done

# emacs flag set
if [[ emacs_flag -eq 1 ]]; then
    echo -ne "\nOpening sensitive data using Emacs"
fi

# vim flag set
if [[ vim_flag -eq 1 ]]; then
    echo -ne "\nOpening sensitive data using Vim"
fi

# nano flag set
if [[ nano_flag -eq 1 ]]; then
    echo -ne "\nOpening sensitive data using Nano"
fi

# error flag set
if [[ error_flag -eq 1 ]]; then
    echo -ne "\nError: invalid option, refer to help page"
fi

# opening with text editor of choice
echo -ne "\n"
echo -ne '[######...................]   33%  \r'
sleep 1
echo -ne '[##############...........]   66%  \r'
sleep 1
echo -ne '[#########################]   100% \r'
sleep 1
echo -ne '\n'

# opening with text editor
if [[ emacs_flag -eq 1 ]]; then
    emacs data.txt
elif [[ vim_flag -eq 1 ]]; then
    vim data.txt
elif [[ nano_flag -eq 1 ]]; then
    nano data.txt
fi
